version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

#查看所有被占用的端口:netstat   -nultp

services:
  #  golang开发环境 #####
  golang: # 自定义容器名称
    build:
      context: ./golang                  # 指定构建使用的 Dockerfile 文件
    container_name: golang
    working_dir: /usr/src/code
    environment: # 设置环境变量
      - TZ=${TZ}
    volumes: # 设置挂载目录
      - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
    ports: # 设置端口映射
      - "${GO_SERVER_PORT}:8888"
#      - "8888"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    entrypoint: ./main                     # 执行sh命令 GOOS="linux" CGO_ENABLED="0" go build main.go
#    network_mode: host
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  #  redis环境 ##### etcd冲突
  redis:
    build:
      context: ./redis
    container_name: redisDB
    environment:
      - TZ=${TZ}
    volumes:
#      - ./redis.conf:/usr/local/etc/redis/redis.conf:rw   # 由于etcd启用，内置包含redis已经占用了6379+redis的conf文件信息，所以新起的redis需要自己配置redis的conf和一个新的端口。
      - ${DATA_PATH_HOST}/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
#      - "${REDIS_BACKUP_PORT}:6479"
#    network_mode: host
    networks:
      - backend
    restart: always
#    command:
#      /bin/bash -c "redis-server /usr/local/etc/redis/redis.conf" # 执行对应指定的redis版本conf文件

  #  mysql环境 #####
  mysql:
    build:
      context: ./mysql
    container_name: ${DB_CONTAINER_NAME}
    environment:
      - TZ=${TZ}
      #      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      #      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
      #      - MYSQL_ALLOW_EMPTY_PASSWORD= 'yes'            # 允许无密码访问
      - MYSQL_DATABASE=${TARGET_DATABASE_NAME}        # 创建默认数据库
    volumes:
      #      - ./mysql/config/my.cnf:/etc/my.cnf            # mysql相关配置文件
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
      - ${DATA_INIT_PATH}:/docker-entrypoint-initdb.d # mysql初始化SQL 添加apollo所需初始化表
    ports:
#      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
      - "${MYSQL_PORT}"
    network_mode: host
#    networks:
#      - backend
    restart: always

  # apollo环境 #####
  apollo-configservice:
    depends_on:
      - mysql
    container_name: apollo-configservice
    image: apolloconfig/apollo-configservice
    volumes:
      - ${DATA_PATH_HOST}/apollo/logs:/opt/logs
    ports:
      #      - "${APOLLO_CONFIG_SERVICE_PORT}:8080"
      - "${APOLLO_CONFIG_SERVICE_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://${LOCAL_HOST}:${MYSQL_PORT}/ApolloConfigDB?characterEncoding=${DB_CHARACTER}
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
    restart: always
    network_mode: host
  #    networks:
  #      - backend

  apollo-adminservice:
    depends_on:
      - apollo-configservice
    container_name: apollo-adminservice
    image: apolloconfig/apollo-adminservice
    volumes:
      - ${DATA_PATH_HOST}/apollo/logs:/opt/logs   # 挂载日志
    ports:
      #      - "${APOLLO_ADMIN_SERVICE_PORT}:8090"
      - "${APOLLO_ADMIN_SERVICE_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://${LOCAL_HOST}:${MYSQL_PORT}/ApolloConfigDB?characterEncoding=${DB_CHARACTER}
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
    restart: always
    network_mode: host   # host模式指定是容器与主机享受相同的network namespace，在这种情况下，我们访问主机端口就能访问我们的容器。
  #      networks:            # 与network_mode冲突
  #        - backend

  apollo-portal:
    depends_on:
      - apollo-adminservice
    container_name: apollo-portal
    image: apolloconfig/apollo-portal
    volumes:
      - ${DATA_PATH_HOST}/apollo/logs:/opt/logs
    ports:
      #        - "${APOLLO_PORTAL_PORT}:8070"
      - "${APOLLO_PORTAL_PORT}"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://${LOCAL_HOST}:${MYSQL_PORT}/ApolloPortalDB?characterEncoding=${DB_CHARACTER}
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
      #        - APOLLO_PORTAL_ENVS=dev
      - DEV_META=http://${LOCAL}:${APOLLO_CONFIG_SERVICE_PORT}
    restart: always
    network_mode: host
  #      networks:
  #        - backend

  # etcd环境 #####
  etcd:
#    image: bitnami/etcd:latest
    build:
      context: ./etcd
    container_name: etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379    # 列出这个成员的客户端URL，通告给集群中的其他成员
    ports:
      - "${ETCD_CLIENT_PORT}:2379"
      - "${ETCD_PEER_PORT}:2380"
    volumes:
      - ${DATA_PATH_HOST}/etcd/data:/bitnami/etcd
#    network_mode: host
    restart: always
    networks:
     - backend
  jaeger:
    build:
      context: ./jaeger
    container_name: jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
      - "${JAEGER_DATA_PORT}:6831/udp"
    networks:
      - backend
    restart: always

  # prometheus环境 #####
  prometheus:
    build:
      context: ./prometheus
    container_name: prometheus
    environment:
      - TZ=${TZ}
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always