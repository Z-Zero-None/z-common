// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	ptypes "gopa/api/ptypes"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeaTypeRPCClient is the client API for TeaTypeRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeaTypeRPCClient interface {
	Create(ctx context.Context, in *TeaTypeCreateRequest, opts ...grpc.CallOption) (*TeaTypeResponse, error)
	Delete(ctx context.Context, in *TeaTypeDeleteRequest, opts ...grpc.CallOption) (*ptypes.Int64, error)
	Update(ctx context.Context, in *TeaTypeUpdateRequest, opts ...grpc.CallOption) (*ptypes.Empty, error)
	Get(ctx context.Context, in *TeaTypeGetRequest, opts ...grpc.CallOption) (*TeaTypeResponse, error)
	Search(ctx context.Context, in *TeaTypeSearchRequest, opts ...grpc.CallOption) (*TeaTypeSearchResponse, error)
}

type teaTypeRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTeaTypeRPCClient(cc grpc.ClientConnInterface) TeaTypeRPCClient {
	return &teaTypeRPCClient{cc}
}

func (c *teaTypeRPCClient) Create(ctx context.Context, in *TeaTypeCreateRequest, opts ...grpc.CallOption) (*TeaTypeResponse, error) {
	out := new(TeaTypeResponse)
	err := c.cc.Invoke(ctx, "/gopa.api.tea.proto.TeaTypeRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaTypeRPCClient) Delete(ctx context.Context, in *TeaTypeDeleteRequest, opts ...grpc.CallOption) (*ptypes.Int64, error) {
	out := new(ptypes.Int64)
	err := c.cc.Invoke(ctx, "/gopa.api.tea.proto.TeaTypeRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaTypeRPCClient) Update(ctx context.Context, in *TeaTypeUpdateRequest, opts ...grpc.CallOption) (*ptypes.Empty, error) {
	out := new(ptypes.Empty)
	err := c.cc.Invoke(ctx, "/gopa.api.tea.proto.TeaTypeRPC/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaTypeRPCClient) Get(ctx context.Context, in *TeaTypeGetRequest, opts ...grpc.CallOption) (*TeaTypeResponse, error) {
	out := new(TeaTypeResponse)
	err := c.cc.Invoke(ctx, "/gopa.api.tea.proto.TeaTypeRPC/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teaTypeRPCClient) Search(ctx context.Context, in *TeaTypeSearchRequest, opts ...grpc.CallOption) (*TeaTypeSearchResponse, error) {
	out := new(TeaTypeSearchResponse)
	err := c.cc.Invoke(ctx, "/gopa.api.tea.proto.TeaTypeRPC/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeaTypeRPCServer is the server API for TeaTypeRPC service.
// All implementations should embed UnimplementedTeaTypeRPCServer
// for forward compatibility
type TeaTypeRPCServer interface {
	Create(context.Context, *TeaTypeCreateRequest) (*TeaTypeResponse, error)
	Delete(context.Context, *TeaTypeDeleteRequest) (*ptypes.Int64, error)
	Update(context.Context, *TeaTypeUpdateRequest) (*ptypes.Empty, error)
	Get(context.Context, *TeaTypeGetRequest) (*TeaTypeResponse, error)
	Search(context.Context, *TeaTypeSearchRequest) (*TeaTypeSearchResponse, error)
}

// UnimplementedTeaTypeRPCServer should be embedded to have forward compatible implementations.
type UnimplementedTeaTypeRPCServer struct {
}

func (UnimplementedTeaTypeRPCServer) Create(context.Context, *TeaTypeCreateRequest) (*TeaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTeaTypeRPCServer) Delete(context.Context, *TeaTypeDeleteRequest) (*ptypes.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTeaTypeRPCServer) Update(context.Context, *TeaTypeUpdateRequest) (*ptypes.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTeaTypeRPCServer) Get(context.Context, *TeaTypeGetRequest) (*TeaTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTeaTypeRPCServer) Search(context.Context, *TeaTypeSearchRequest) (*TeaTypeSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

// UnsafeTeaTypeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeaTypeRPCServer will
// result in compilation errors.
type UnsafeTeaTypeRPCServer interface {
	mustEmbedUnimplementedTeaTypeRPCServer()
}

func RegisterTeaTypeRPCServer(s grpc.ServiceRegistrar, srv TeaTypeRPCServer) {
	s.RegisterService(&TeaTypeRPC_ServiceDesc, srv)
}

func _TeaTypeRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeaTypeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaTypeRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopa.api.tea.proto.TeaTypeRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaTypeRPCServer).Create(ctx, req.(*TeaTypeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaTypeRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeaTypeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaTypeRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopa.api.tea.proto.TeaTypeRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaTypeRPCServer).Delete(ctx, req.(*TeaTypeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaTypeRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeaTypeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaTypeRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopa.api.tea.proto.TeaTypeRPC/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaTypeRPCServer).Update(ctx, req.(*TeaTypeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaTypeRPC_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeaTypeGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaTypeRPCServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopa.api.tea.proto.TeaTypeRPC/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaTypeRPCServer).Get(ctx, req.(*TeaTypeGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeaTypeRPC_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeaTypeSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeaTypeRPCServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopa.api.tea.proto.TeaTypeRPC/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeaTypeRPCServer).Search(ctx, req.(*TeaTypeSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeaTypeRPC_ServiceDesc is the grpc.ServiceDesc for TeaTypeRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeaTypeRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopa.api.tea.proto.TeaTypeRPC",
	HandlerType: (*TeaTypeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TeaTypeRPC_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TeaTypeRPC_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TeaTypeRPC_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TeaTypeRPC_Get_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _TeaTypeRPC_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/products/src/tea_type.proto",
}
